<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
      http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <!-- scanner redis properties  -->
    <!--<context:property-placeholder location="classpath:database/redis-config.properties" ignore-unresolvable="true"/>-->

    <!--（1）如果你有多个数据源需要通过<context:property-placeholder管理，且不愿意放在一个配置文件里，那么一定要加上ignore-unresolvable=“true"-->
    <!--（2）注意新版的（具体从哪个版本开始不清楚，有兴趣可以查一下）JedisPoolConfig的property name，不是maxActive而是maxTotal，而且没有maxWait属性，建议看一下Jedis源码。-->
    <!-- redis连接池 -->
    <!--<bean id="jedisConfig" class="redis.clients.jedis.JedisPoolConfig">-->
    <!--<property name="maxTotal" value="${redis.maxActive}"></property>-->
    <!--<property name="maxIdle" value="${redis.maxIdle}"></property>-->
    <!--<property name="maxWaitMillis" value="${redis.maxWait}"></property>-->
    <!--<property name="testOnBorrow" value="${redis.testOnBorrow}"></property>-->
    <!--</bean>-->
    <!--&lt;!&ndash; redis连接工厂 &ndash;&gt;-->
    <!--<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
    <!--<property name="hostName" value="${redis.host}"></property>-->
    <!--<property name="port" value="${redis.port}"></property>-->
    <!--<property name="password" value="${redis.password}"></property>-->
    <!--<property name="poolConfig" ref="jedisConfig"></property>-->
    <!--</bean>-->
    <!-- redis操作模板，这里采用尽量面向对象的模板 -->
    <!--<bean id="redisUtil" class="org.springframework.data.redis.core.StringRedisTemplate">-->
    <!--<property name="connectionFactory" ref="connectionFactory"/>-->
    <!--&lt;!&ndash;     如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 can't cast to String！！！&ndash;&gt;-->
    <!--<property name="keySerializer">-->
    <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->
    <!--</property>-->
    <!--<property name="valueSerializer">-->
    <!--<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>-->
    <!--</property>-->
    <!--&lt;!&ndash;开启事务&ndash;&gt;-->
    <!--<property name="enableTransactionSupport" value="true"/>-->
    <!--</bean>-->

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 控制一个pool可分配多少个jedis实例 -->
        <property name="maxTotal" value="${redis.maxTotal}"/>
        <!-- 控制一个pool最多有多少个状态为idle(空闲)的jedis实例 -->
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="minIdle" value="${redis.minIdle}"/>
        <!-- 表示当borrow一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException -->
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>
        <!-- 在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的 -->
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
        <property name="testOnReturn" value="${redis.testOnReturn}"/>
        <property name="testWhileIdle" value="${redis.testWhileIdle}"/>
    </bean>

    <!-- redis的连接池pool，不是必选项：timeout/password -->
    <bean id="jedisPool" class="com.newhome.util.redis.JedisPoolUtil">
        <constructor-arg index="0" ref="jedisPoolConfig"/>
        <constructor-arg index="1" value="${redis.host}" type="java.lang.String"/>
        <constructor-arg index="2" value="${redis.port}" type="int"/>
        <constructor-arg index="3" value="${redis.timeout}" type="int"/>
        <constructor-arg index="4" value="${redis.password}" type="java.lang.String"/>
        <constructor-arg index="5" value="${redis.database}" type="int"/>
    </bean>
    <bean id="redisUtil" class="com.newhome.util.redis.RedisUtil">
        <property name="jedisPool" ref="jedisPool"></property>
    </bean>
</beans>